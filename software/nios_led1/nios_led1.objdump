
nios_led1.elf:     file format elf32-littlenios2
nios_led1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000824 memsz 0x00000824 flags r-x
    LOAD off    0x00001844 vaddr 0x00008844 paddr 0x00008e34 align 2**12
         filesz 0x000005f0 memsz 0x000005f0 flags rw-
    LOAD off    0x00000424 vaddr 0x00009424 paddr 0x00009424 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00001e34  2**0
                  CONTENTS
  2 .text         00000818  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000000c  00008838  00008838  00001838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000005f0  00008844  00008e34  00001844  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00009424  00009424  00002424  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00009434  00009434  00001e34  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00001e34  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002b0  00000000  00000000  00001e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   00003b74  00000000  00000000  00002118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000013e4  00000000  00000000  00005c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00000bda  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00000438  00000000  00000000  00007c4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00000a99  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_alt_sim_info 00000010  00000000  00000000  00008b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000020  00000000  00000000  00008b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line_str 000009b6  00000000  00000000  00008b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 00000282  00000000  00000000  00009506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000064  00000000  00000000  00009788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .thread_model 00000003  00000000  00000000  0000aa1e  2**0
                  CONTENTS, READONLY
 20 .cpu          00000003  00000000  00000000  0000aa21  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0000aa24  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0000aa25  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  0000aa26  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  0000aa2a  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  0000aa2e  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000004  00000000  00000000  0000aa32  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000004  00000000  00000000  0000aa36  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000004  00000000  00000000  0000aa3a  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000009  00000000  00000000  0000aa3e  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 00000051  00000000  00000000  0000aa47  2**0
                  CONTENTS, READONLY
 31 .jdi          0000358c  00000000  00000000  0000aa98  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     00037e70  00000000  00000000  0000e024  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00008838 l    d  .rodata	00000000 .rodata
00008844 l    d  .rwdata	00000000 .rwdata
00009424 l    d  .bss	00000000 .bss
00009434 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    df *ABS*	00000000 crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00008e10 l     O .rwdata	00000001 led_pattern.0
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
0000817c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_close.c
00008328 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00008460 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
000089ec l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00008268 g     F .text	00000060 alt_main
00008e34 g       *ABS*	00000000 __flash_rwdata_start
000085e4 g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
00009430 g     O .bss	00000004 errno
00009428 g     O .bss	00000004 alt_argv
00010e10 g       *ABS*	00000000 _gp
0000886c g     O .rwdata	00000180 alt_fd_list
00008838 g       *ABS*	00000000 __DTOR_END__
00008e24 g     O .rwdata	00000004 alt_max_fd
00008e2c g     O .rwdata	00000004 _global_impure_ptr
00009434 g       *ABS*	00000000 __bss_end
00008000 g       *ABS*	00000000 __alt_mem_onchip_mem
00008844 g     O .rwdata	00000028 alt_dev_null
00008440 g     F .text	00000020 alt_dcache_flush_all
00008e34 g       *ABS*	00000000 __ram_rwdata_end
00008e1c g     O .rwdata	00000008 alt_dev_list
00008844 g       *ABS*	00000000 __ram_rodata_end
00009434 g       *ABS*	00000000 end
00008838 g       *ABS*	00000000 __CTOR_LIST__
0000d000 g       *ABS*	00000000 __alt_stack_pointer
000086e0 g     F .text	00000120 __call_exitprocs
00008020 g     F .text	0000003c _start
00008304 g     F .text	00000024 alt_sys_init
00008650 g     F .text	00000090 __register_exitproc
00008098 g     F .text	00000080 led_flash
00008154 g     F .text	00000028 .hidden __mulsi3
00008844 g       *ABS*	00000000 __ram_rwdata_start
00008838 g       *ABS*	00000000 __ram_rodata_start
00009434 g       *ABS*	00000000 __alt_stack_base
0000805c g     F .text	0000003c sw_get_command
00009424 g       *ABS*	00000000 __bss_start
00008118 g     F .text	0000003c main
0000942c g     O .bss	00000004 alt_envp
00008e28 g     O .rwdata	00000004 alt_errno
00008838 g       *ABS*	00000000 __CTOR_END__
00008838 g       *ABS*	00000000 __flash_rodata_start
00008838 g       *ABS*	00000000 __DTOR_LIST__
000082c8 g     F .text	0000003c alt_irq_init
00008574 g     F .text	00000070 alt_release_fd
00008608 g     F .text	00000014 atexit
00008e30 g     O .rwdata	00000004 _impure_ptr
00009424 g     O .bss	00000004 alt_argc
000084f0 g     F .text	00000064 _do_dtors
00008e14 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008e34 g       *ABS*	00000000 _edata
00009434 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
0000861c g     F .text	00000034 exit
0000d000 g       *ABS*	00000000 __alt_data_end
00008800 g     F .text	00000038 _exit
00008554 g     F .text	00000020 alt_icache_flush_all
0000848c g     F .text	00000064 _do_ctors
00008364 g     F .text	000000dc close
000081e4 g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6838414 	ori	gp,gp,3600
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a50914 	ori	r2,r2,37924

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e50d14 	ori	r3,r3,37940

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	00081e40 	call	81e4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00082680 	call	8268 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <sw_get_command>:
#include "io.h"
#include "alt_types.h"
#include "system.h"


void sw_get_command(alt_u32 sw_base, int *prd){
    805c:	defffd04 	addi	sp,sp,-12
    8060:	df000215 	stw	fp,8(sp)
    8064:	df000204 	addi	fp,sp,8
    8068:	e13fff15 	stw	r4,-4(fp)
    806c:	e17ffe15 	stw	r5,-8(fp)
	*prd = IORD(sw_base, 0) & 0x000003ff; // read flashing period
    8070:	e0bfff17 	ldw	r2,-4(fp)
    8074:	10800037 	ldwio	r2,0(r2)
    8078:	10c0ffcc 	andi	r3,r2,1023
    807c:	e0bffe17 	ldw	r2,-8(fp)
    8080:	10c00015 	stw	r3,0(r2)
}
    8084:	0001883a 	nop
    8088:	e037883a 	mov	sp,fp
    808c:	df000017 	ldw	fp,0(sp)
    8090:	dec00104 	addi	sp,sp,4
    8094:	f800283a 	ret

00008098 <led_flash>:

void led_flash(alt_u32 led_base, int prd){
    8098:	defffa04 	addi	sp,sp,-24
    809c:	dfc00515 	stw	ra,20(sp)
    80a0:	df000415 	stw	fp,16(sp)
    80a4:	df000404 	addi	fp,sp,16
    80a8:	e13ffd15 	stw	r4,-12(fp)
    80ac:	e17ffc15 	stw	r5,-16(fp)
	static alt_u8 led_pattern = 0x01; //initial pattern
	unsigned long i, itr;
	led_pattern ^= 0x03; //toggle 2 LEDs (2LSBs);
    80b0:	d0a00003 	ldbu	r2,-32768(gp)
    80b4:	108000dc 	xori	r2,r2,3
    80b8:	d0a00005 	stb	r2,-32768(gp)
	IOWR(led_base, 0, led_pattern);
    80bc:	e0bffd17 	ldw	r2,-12(fp)
    80c0:	d0e00003 	ldbu	r3,-32768(gp)
    80c4:	18c03fcc 	andi	r3,r3,255
    80c8:	10c00035 	stwio	r3,0(r2)
	itr = prd *2500;
    80cc:	01427104 	movi	r5,2500
    80d0:	e13ffc17 	ldw	r4,-16(fp)
    80d4:	00081540 	call	8154 <__mulsi3>
    80d8:	e0bffe15 	stw	r2,-8(fp)
	for(i=0; i<itr; i++){} // dummy loop for delay
    80dc:	e03fff15 	stw	zero,-4(fp)
    80e0:	00000306 	br	80f0 <led_flash+0x58>
    80e4:	e0bfff17 	ldw	r2,-4(fp)
    80e8:	10800044 	addi	r2,r2,1
    80ec:	e0bfff15 	stw	r2,-4(fp)
    80f0:	e0ffff17 	ldw	r3,-4(fp)
    80f4:	e0bffe17 	ldw	r2,-8(fp)
    80f8:	18bffa36 	bltu	r3,r2,80e4 <led_flash+0x4c>
}
    80fc:	0001883a 	nop
    8100:	0001883a 	nop
    8104:	e037883a 	mov	sp,fp
    8108:	dfc00117 	ldw	ra,4(sp)
    810c:	df000017 	ldw	fp,0(sp)
    8110:	dec00204 	addi	sp,sp,8
    8114:	f800283a 	ret

00008118 <main>:

int main()
{
    8118:	defffd04 	addi	sp,sp,-12
    811c:	dfc00215 	stw	ra,8(sp)
    8120:	df000115 	stw	fp,4(sp)
    8124:	df000104 	addi	fp,sp,4
	int prd;
	while(1){
		sw_get_command(SWITCH_BASE, &prd);
    8128:	e0bfff04 	addi	r2,fp,-4
    812c:	100b883a 	mov	r5,r2
    8130:	01000074 	movhi	r4,1
    8134:	21040c04 	addi	r4,r4,4144
    8138:	000805c0 	call	805c <sw_get_command>
		led_flash(LED_BASE, prd);
    813c:	e0bfff17 	ldw	r2,-4(fp)
    8140:	100b883a 	mov	r5,r2
    8144:	01000074 	movhi	r4,1
    8148:	21040804 	addi	r4,r4,4128
    814c:	00080980 	call	8098 <led_flash>
		sw_get_command(SWITCH_BASE, &prd);
    8150:	003ff506 	br	8128 <main+0x10>

00008154 <__mulsi3>:
    8154:	0005883a 	mov	r2,zero
    8158:	20000726 	beq	r4,zero,8178 <__mulsi3+0x24>
    815c:	20c0004c 	andi	r3,r4,1
    8160:	2008d07a 	srli	r4,r4,1
    8164:	18000126 	beq	r3,zero,816c <__mulsi3+0x18>
    8168:	1145883a 	add	r2,r2,r5
    816c:	294b883a 	add	r5,r5,r5
    8170:	203ffa1e 	bne	r4,zero,815c <__mulsi3+0x8>
    8174:	f800283a 	ret
    8178:	f800283a 	ret

0000817c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    817c:	defffc04 	addi	sp,sp,-16
    8180:	df000315 	stw	fp,12(sp)
    8184:	df000304 	addi	fp,sp,12
    8188:	e13fff15 	stw	r4,-4(fp)
    818c:	e17ffe15 	stw	r5,-8(fp)
    8190:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
    8194:	e0fffe17 	ldw	r3,-8(fp)
    8198:	e0bfff17 	ldw	r2,-4(fp)
    819c:	18800c26 	beq	r3,r2,81d0 <alt_load_section+0x54>
  {
    while( to != end )
    81a0:	00000806 	br	81c4 <alt_load_section+0x48>
    {
      *to++ = *from++;
    81a4:	e0ffff17 	ldw	r3,-4(fp)
    81a8:	18800104 	addi	r2,r3,4
    81ac:	e0bfff15 	stw	r2,-4(fp)
    81b0:	e0bffe17 	ldw	r2,-8(fp)
    81b4:	11000104 	addi	r4,r2,4
    81b8:	e13ffe15 	stw	r4,-8(fp)
    81bc:	18c00017 	ldw	r3,0(r3)
    81c0:	10c00015 	stw	r3,0(r2)
    while( to != end )
    81c4:	e0fffe17 	ldw	r3,-8(fp)
    81c8:	e0bffd17 	ldw	r2,-12(fp)
    81cc:	18bff51e 	bne	r3,r2,81a4 <alt_load_section+0x28>
    }
  }
}
    81d0:	0001883a 	nop
    81d4:	e037883a 	mov	sp,fp
    81d8:	df000017 	ldw	fp,0(sp)
    81dc:	dec00104 	addi	sp,sp,4
    81e0:	f800283a 	ret

000081e4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    81e4:	defffe04 	addi	sp,sp,-8
    81e8:	dfc00115 	stw	ra,4(sp)
    81ec:	df000015 	stw	fp,0(sp)
    81f0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    81f4:	01800074 	movhi	r6,1
    81f8:	31a38d04 	addi	r6,r6,-29132
    81fc:	01400074 	movhi	r5,1
    8200:	29621104 	addi	r5,r5,-30652
    8204:	01000074 	movhi	r4,1
    8208:	21238d04 	addi	r4,r4,-29132
    820c:	000817c0 	call	817c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8210:	01800074 	movhi	r6,1
    8214:	31a00804 	addi	r6,r6,-32736
    8218:	01400074 	movhi	r5,1
    821c:	29600804 	addi	r5,r5,-32736
    8220:	01000074 	movhi	r4,1
    8224:	21200804 	addi	r4,r4,-32736
    8228:	000817c0 	call	817c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    822c:	01800074 	movhi	r6,1
    8230:	31a21104 	addi	r6,r6,-30652
    8234:	01400074 	movhi	r5,1
    8238:	29620e04 	addi	r5,r5,-30664
    823c:	01000074 	movhi	r4,1
    8240:	21220e04 	addi	r4,r4,-30664
    8244:	000817c0 	call	817c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8248:	00084400 	call	8440 <alt_dcache_flush_all>
  alt_icache_flush_all();
    824c:	00085540 	call	8554 <alt_icache_flush_all>
}
    8250:	0001883a 	nop
    8254:	e037883a 	mov	sp,fp
    8258:	dfc00117 	ldw	ra,4(sp)
    825c:	df000017 	ldw	fp,0(sp)
    8260:	dec00204 	addi	sp,sp,8
    8264:	f800283a 	ret

00008268 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8268:	defffd04 	addi	sp,sp,-12
    826c:	dfc00215 	stw	ra,8(sp)
    8270:	df000115 	stw	fp,4(sp)
    8274:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8278:	0009883a 	mov	r4,zero
    827c:	00082c80 	call	82c8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    8280:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8284:	00083040 	call	8304 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    8288:	000848c0 	call	848c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    828c:	01000074 	movhi	r4,1
    8290:	21213c04 	addi	r4,r4,-31504
    8294:	00086080 	call	8608 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    8298:	d0a18517 	ldw	r2,-31212(gp)
    829c:	d0e18617 	ldw	r3,-31208(gp)
    82a0:	d1218717 	ldw	r4,-31204(gp)
    82a4:	200d883a 	mov	r6,r4
    82a8:	180b883a 	mov	r5,r3
    82ac:	1009883a 	mov	r4,r2
    82b0:	00081180 	call	8118 <main>
    82b4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    82b8:	01000044 	movi	r4,1
    82bc:	00083640 	call	8364 <close>
  exit (result);
    82c0:	e13fff17 	ldw	r4,-4(fp)
    82c4:	000861c0 	call	861c <exit>

000082c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    82c8:	defffd04 	addi	sp,sp,-12
    82cc:	dfc00215 	stw	ra,8(sp)
    82d0:	df000115 	stw	fp,4(sp)
    82d4:	df000104 	addi	fp,sp,4
    82d8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
    82dc:	00085e40 	call	85e4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    82e0:	00800044 	movi	r2,1
    82e4:	1001703a 	wrctl	status,r2
#if defined(NIOS2_EIC_PRESENT) && (NIOS2_NUM_OF_SHADOW_REG_SETS > 0)
    | NIOS2_STATUS_RSIE_MSK
#endif      
      );
}
    82e8:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
    82ec:	0001883a 	nop
    82f0:	e037883a 	mov	sp,fp
    82f4:	dfc00117 	ldw	ra,4(sp)
    82f8:	df000017 	ldw	fp,0(sp)
    82fc:	dec00204 	addi	sp,sp,8
    8300:	f800283a 	ret

00008304 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8304:	deffff04 	addi	sp,sp,-4
    8308:	df000015 	stw	fp,0(sp)
    830c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    8310:	0001883a 	nop
}
    8314:	0001883a 	nop
    8318:	e037883a 	mov	sp,fp
    831c:	df000017 	ldw	fp,0(sp)
    8320:	dec00104 	addi	sp,sp,4
    8324:	f800283a 	ret

00008328 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    8328:	defffe04 	addi	sp,sp,-8
    832c:	dfc00115 	stw	ra,4(sp)
    8330:	df000015 	stw	fp,0(sp)
    8334:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    8338:	d0a00617 	ldw	r2,-32744(gp)
    833c:	10000326 	beq	r2,zero,834c <alt_get_errno+0x24>
    8340:	d0a00617 	ldw	r2,-32744(gp)
    8344:	103ee83a 	callr	r2
    8348:	00000106 	br	8350 <alt_get_errno+0x28>
    834c:	d0a18804 	addi	r2,gp,-31200
}
    8350:	e037883a 	mov	sp,fp
    8354:	dfc00117 	ldw	ra,4(sp)
    8358:	df000017 	ldw	fp,0(sp)
    835c:	dec00204 	addi	sp,sp,8
    8360:	f800283a 	ret

00008364 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    8364:	defffb04 	addi	sp,sp,-20
    8368:	dfc00415 	stw	ra,16(sp)
    836c:	df000315 	stw	fp,12(sp)
    8370:	df000304 	addi	fp,sp,12
    8374:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    8378:	e0bffd17 	ldw	r2,-12(fp)
    837c:	10000916 	blt	r2,zero,83a4 <close+0x40>
    8380:	e0fffd17 	ldw	r3,-12(fp)
    8384:	1805883a 	mov	r2,r3
    8388:	1085883a 	add	r2,r2,r2
    838c:	10c5883a 	add	r2,r2,r3
    8390:	100490ba 	slli	r2,r2,2
    8394:	00c00074 	movhi	r3,1
    8398:	18e21b04 	addi	r3,r3,-30612
    839c:	10c5883a 	add	r2,r2,r3
    83a0:	00000106 	br	83a8 <close+0x44>
    83a4:	0005883a 	mov	r2,zero
    83a8:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
    83ac:	e0bfff17 	ldw	r2,-4(fp)
    83b0:	10001926 	beq	r2,zero,8418 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    83b4:	e0bfff17 	ldw	r2,-4(fp)
    83b8:	10800017 	ldw	r2,0(r2)
    83bc:	10800417 	ldw	r2,16(r2)
    83c0:	10000626 	beq	r2,zero,83dc <close+0x78>
    83c4:	e0bfff17 	ldw	r2,-4(fp)
    83c8:	10800017 	ldw	r2,0(r2)
    83cc:	10800417 	ldw	r2,16(r2)
    83d0:	e13fff17 	ldw	r4,-4(fp)
    83d4:	103ee83a 	callr	r2
    83d8:	00000106 	br	83e0 <close+0x7c>
    83dc:	0005883a 	mov	r2,zero
    83e0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    83e4:	e13ffd17 	ldw	r4,-12(fp)
    83e8:	00085740 	call	8574 <alt_release_fd>
    if (rval < 0)
    83ec:	e0bffe17 	ldw	r2,-8(fp)
    83f0:	1000070e 	bge	r2,zero,8410 <close+0xac>
    {
      ALT_ERRNO = -rval;
    83f4:	00083280 	call	8328 <alt_get_errno>
    83f8:	1007883a 	mov	r3,r2
    83fc:	e0bffe17 	ldw	r2,-8(fp)
    8400:	0085c83a 	sub	r2,zero,r2
    8404:	18800015 	stw	r2,0(r3)
      return -1;
    8408:	00bfffc4 	movi	r2,-1
    840c:	00000706 	br	842c <close+0xc8>
    }
    return 0;
    8410:	0005883a 	mov	r2,zero
    8414:	00000506 	br	842c <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    8418:	00083280 	call	8328 <alt_get_errno>
    841c:	1007883a 	mov	r3,r2
    8420:	00801444 	movi	r2,81
    8424:	18800015 	stw	r2,0(r3)
    return -1;
    8428:	00bfffc4 	movi	r2,-1
  }
}
    842c:	e037883a 	mov	sp,fp
    8430:	dfc00117 	ldw	ra,4(sp)
    8434:	df000017 	ldw	fp,0(sp)
    8438:	dec00204 	addi	sp,sp,8
    843c:	f800283a 	ret

00008440 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8440:	deffff04 	addi	sp,sp,-4
    8444:	df000015 	stw	fp,0(sp)
    8448:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    844c:	0001883a 	nop
    8450:	e037883a 	mov	sp,fp
    8454:	df000017 	ldw	fp,0(sp)
    8458:	dec00104 	addi	sp,sp,4
    845c:	f800283a 	ret

00008460 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    8460:	defffc04 	addi	sp,sp,-16
    8464:	df000315 	stw	fp,12(sp)
    8468:	df000304 	addi	fp,sp,12
    846c:	e13fff15 	stw	r4,-4(fp)
    8470:	e17ffe15 	stw	r5,-8(fp)
    8474:	e1bffd15 	stw	r6,-12(fp)
  return len;
    8478:	e0bffd17 	ldw	r2,-12(fp)
}
    847c:	e037883a 	mov	sp,fp
    8480:	df000017 	ldw	fp,0(sp)
    8484:	dec00104 	addi	sp,sp,4
    8488:	f800283a 	ret

0000848c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    848c:	defffd04 	addi	sp,sp,-12
    8490:	dfc00215 	stw	ra,8(sp)
    8494:	df000115 	stw	fp,4(sp)
    8498:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    849c:	00800074 	movhi	r2,1
    84a0:	10a20d04 	addi	r2,r2,-30668
    84a4:	e0bfff15 	stw	r2,-4(fp)
    84a8:	00000606 	br	84c4 <_do_ctors+0x38>
        (*ctor) (); 
    84ac:	e0bfff17 	ldw	r2,-4(fp)
    84b0:	10800017 	ldw	r2,0(r2)
    84b4:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    84b8:	e0bfff17 	ldw	r2,-4(fp)
    84bc:	10bfff04 	addi	r2,r2,-4
    84c0:	e0bfff15 	stw	r2,-4(fp)
    84c4:	e0ffff17 	ldw	r3,-4(fp)
    84c8:	00800074 	movhi	r2,1
    84cc:	10a20e04 	addi	r2,r2,-30664
    84d0:	18bff62e 	bgeu	r3,r2,84ac <_do_ctors+0x20>
}
    84d4:	0001883a 	nop
    84d8:	0001883a 	nop
    84dc:	e037883a 	mov	sp,fp
    84e0:	dfc00117 	ldw	ra,4(sp)
    84e4:	df000017 	ldw	fp,0(sp)
    84e8:	dec00204 	addi	sp,sp,8
    84ec:	f800283a 	ret

000084f0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    84f0:	defffd04 	addi	sp,sp,-12
    84f4:	dfc00215 	stw	ra,8(sp)
    84f8:	df000115 	stw	fp,4(sp)
    84fc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    8500:	00800074 	movhi	r2,1
    8504:	10a20d04 	addi	r2,r2,-30668
    8508:	e0bfff15 	stw	r2,-4(fp)
    850c:	00000606 	br	8528 <_do_dtors+0x38>
        (*dtor) (); 
    8510:	e0bfff17 	ldw	r2,-4(fp)
    8514:	10800017 	ldw	r2,0(r2)
    8518:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    851c:	e0bfff17 	ldw	r2,-4(fp)
    8520:	10bfff04 	addi	r2,r2,-4
    8524:	e0bfff15 	stw	r2,-4(fp)
    8528:	e0ffff17 	ldw	r3,-4(fp)
    852c:	00800074 	movhi	r2,1
    8530:	10a20e04 	addi	r2,r2,-30664
    8534:	18bff62e 	bgeu	r3,r2,8510 <_do_dtors+0x20>
}
    8538:	0001883a 	nop
    853c:	0001883a 	nop
    8540:	e037883a 	mov	sp,fp
    8544:	dfc00117 	ldw	ra,4(sp)
    8548:	df000017 	ldw	fp,0(sp)
    854c:	dec00204 	addi	sp,sp,8
    8550:	f800283a 	ret

00008554 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8554:	deffff04 	addi	sp,sp,-4
    8558:	df000015 	stw	fp,0(sp)
    855c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    8560:	0001883a 	nop
    8564:	e037883a 	mov	sp,fp
    8568:	df000017 	ldw	fp,0(sp)
    856c:	dec00104 	addi	sp,sp,4
    8570:	f800283a 	ret

00008574 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    8574:	defffe04 	addi	sp,sp,-8
    8578:	df000115 	stw	fp,4(sp)
    857c:	df000104 	addi	fp,sp,4
    8580:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    8584:	e0bfff17 	ldw	r2,-4(fp)
    8588:	108000d0 	cmplti	r2,r2,3
    858c:	1000101e 	bne	r2,zero,85d0 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
    8590:	e0ffff17 	ldw	r3,-4(fp)
    8594:	1805883a 	mov	r2,r3
    8598:	1085883a 	add	r2,r2,r2
    859c:	10c5883a 	add	r2,r2,r3
    85a0:	100490ba 	slli	r2,r2,2
    85a4:	00c00074 	movhi	r3,1
    85a8:	10c7883a 	add	r3,r2,r3
    85ac:	18221d15 	stw	zero,-30604(r3)
    alt_fd_list[fd].dev      = 0;
    85b0:	e0ffff17 	ldw	r3,-4(fp)
    85b4:	1805883a 	mov	r2,r3
    85b8:	1085883a 	add	r2,r2,r2
    85bc:	10c5883a 	add	r2,r2,r3
    85c0:	100490ba 	slli	r2,r2,2
    85c4:	00c00074 	movhi	r3,1
    85c8:	10c7883a 	add	r3,r2,r3
    85cc:	18221b15 	stw	zero,-30612(r3)
  }
}
    85d0:	0001883a 	nop
    85d4:	e037883a 	mov	sp,fp
    85d8:	df000017 	ldw	fp,0(sp)
    85dc:	dec00104 	addi	sp,sp,4
    85e0:	f800283a 	ret

000085e4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    85e4:	deffff04 	addi	sp,sp,-4
    85e8:	df000015 	stw	fp,0(sp)
    85ec:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    85f0:	000170fa 	wrctl	ienable,zero
}
    85f4:	0001883a 	nop
    85f8:	e037883a 	mov	sp,fp
    85fc:	df000017 	ldw	fp,0(sp)
    8600:	dec00104 	addi	sp,sp,4
    8604:	f800283a 	ret

00008608 <atexit>:
    8608:	200b883a 	mov	r5,r4
    860c:	000f883a 	mov	r7,zero
    8610:	000d883a 	mov	r6,zero
    8614:	0009883a 	mov	r4,zero
    8618:	00086501 	jmpi	8650 <__register_exitproc>

0000861c <exit>:
    861c:	defffe04 	addi	sp,sp,-8
    8620:	000b883a 	mov	r5,zero
    8624:	dc000015 	stw	r16,0(sp)
    8628:	dfc00115 	stw	ra,4(sp)
    862c:	2021883a 	mov	r16,r4
    8630:	00086e00 	call	86e0 <__call_exitprocs>
    8634:	00800074 	movhi	r2,1
    8638:	11238b17 	ldw	r4,-29140(r2)
    863c:	20800f17 	ldw	r2,60(r4)
    8640:	10000126 	beq	r2,zero,8648 <exit+0x2c>
    8644:	103ee83a 	callr	r2
    8648:	8009883a 	mov	r4,r16
    864c:	00088000 	call	8800 <_exit>

00008650 <__register_exitproc>:
    8650:	00800074 	movhi	r2,1
    8654:	10e38b17 	ldw	r3,-29140(r2)
    8658:	18805217 	ldw	r2,328(r3)
    865c:	10001726 	beq	r2,zero,86bc <__register_exitproc+0x6c>
    8660:	10c00117 	ldw	r3,4(r2)
    8664:	1a000808 	cmpgei	r8,r3,32
    8668:	40001b1e 	bne	r8,zero,86d8 <__register_exitproc+0x88>
    866c:	20000b26 	beq	r4,zero,869c <__register_exitproc+0x4c>
    8670:	181090ba 	slli	r8,r3,2
    8674:	02400044 	movi	r9,1
    8678:	48d2983a 	sll	r9,r9,r3
    867c:	1211883a 	add	r8,r2,r8
    8680:	41802215 	stw	r6,136(r8)
    8684:	11806217 	ldw	r6,392(r2)
    8688:	21000098 	cmpnei	r4,r4,2
    868c:	324cb03a 	or	r6,r6,r9
    8690:	11806215 	stw	r6,392(r2)
    8694:	41c04215 	stw	r7,264(r8)
    8698:	20000b26 	beq	r4,zero,86c8 <__register_exitproc+0x78>
    869c:	19000084 	addi	r4,r3,2
    86a0:	200890ba 	slli	r4,r4,2
    86a4:	18c00044 	addi	r3,r3,1
    86a8:	10c00115 	stw	r3,4(r2)
    86ac:	1105883a 	add	r2,r2,r4
    86b0:	11400015 	stw	r5,0(r2)
    86b4:	0005883a 	mov	r2,zero
    86b8:	f800283a 	ret
    86bc:	18805304 	addi	r2,r3,332
    86c0:	18805215 	stw	r2,328(r3)
    86c4:	003fe606 	br	8660 <__register_exitproc+0x10>
    86c8:	11006317 	ldw	r4,396(r2)
    86cc:	2248b03a 	or	r4,r4,r9
    86d0:	11006315 	stw	r4,396(r2)
    86d4:	003ff106 	br	869c <__register_exitproc+0x4c>
    86d8:	00bfffc4 	movi	r2,-1
    86dc:	f800283a 	ret

000086e0 <__call_exitprocs>:
    86e0:	defff704 	addi	sp,sp,-36
    86e4:	00800074 	movhi	r2,1
    86e8:	dcc00315 	stw	r19,12(sp)
    86ec:	14e38b17 	ldw	r19,-29140(r2)
    86f0:	dc800215 	stw	r18,8(sp)
    86f4:	dfc00815 	stw	ra,32(sp)
    86f8:	9c805217 	ldw	r18,328(r19)
    86fc:	ddc00715 	stw	r23,28(sp)
    8700:	dd800615 	stw	r22,24(sp)
    8704:	dd400515 	stw	r21,20(sp)
    8708:	dd000415 	stw	r20,16(sp)
    870c:	dc400115 	stw	r17,4(sp)
    8710:	dc000015 	stw	r16,0(sp)
    8714:	90001026 	beq	r18,zero,8758 <__call_exitprocs+0x78>
    8718:	202b883a 	mov	r21,r4
    871c:	282d883a 	mov	r22,r5
    8720:	05000044 	movi	r20,1
    8724:	94000117 	ldw	r16,4(r18)
    8728:	847fffc4 	addi	r17,r16,-1
    872c:	88000a16 	blt	r17,zero,8758 <__call_exitprocs+0x78>
    8730:	84000044 	addi	r16,r16,1
    8734:	802090ba 	slli	r16,r16,2
    8738:	9421883a 	add	r16,r18,r16
    873c:	b0001126 	beq	r22,zero,8784 <__call_exitprocs+0xa4>
    8740:	80804017 	ldw	r2,256(r16)
    8744:	15800f26 	beq	r2,r22,8784 <__call_exitprocs+0xa4>
    8748:	8c7fffc4 	addi	r17,r17,-1
    874c:	88bfffd8 	cmpnei	r2,r17,-1
    8750:	843fff04 	addi	r16,r16,-4
    8754:	103ff91e 	bne	r2,zero,873c <__call_exitprocs+0x5c>
    8758:	dfc00817 	ldw	ra,32(sp)
    875c:	ddc00717 	ldw	r23,28(sp)
    8760:	dd800617 	ldw	r22,24(sp)
    8764:	dd400517 	ldw	r21,20(sp)
    8768:	dd000417 	ldw	r20,16(sp)
    876c:	dcc00317 	ldw	r19,12(sp)
    8770:	dc800217 	ldw	r18,8(sp)
    8774:	dc400117 	ldw	r17,4(sp)
    8778:	dc000017 	ldw	r16,0(sp)
    877c:	dec00904 	addi	sp,sp,36
    8780:	f800283a 	ret
    8784:	90800117 	ldw	r2,4(r18)
    8788:	81800017 	ldw	r6,0(r16)
    878c:	10bfffc4 	addi	r2,r2,-1
    8790:	14401726 	beq	r2,r17,87f0 <__call_exitprocs+0x110>
    8794:	80000015 	stw	zero,0(r16)
    8798:	303feb26 	beq	r6,zero,8748 <__call_exitprocs+0x68>
    879c:	a446983a 	sll	r3,r20,r17
    87a0:	90806217 	ldw	r2,392(r18)
    87a4:	95c00117 	ldw	r23,4(r18)
    87a8:	1884703a 	and	r2,r3,r2
    87ac:	1000081e 	bne	r2,zero,87d0 <__call_exitprocs+0xf0>
    87b0:	303ee83a 	callr	r6
    87b4:	90c00117 	ldw	r3,4(r18)
    87b8:	98805217 	ldw	r2,328(r19)
    87bc:	1dc0011e 	bne	r3,r23,87c4 <__call_exitprocs+0xe4>
    87c0:	14bfe126 	beq	r2,r18,8748 <__call_exitprocs+0x68>
    87c4:	103fe426 	beq	r2,zero,8758 <__call_exitprocs+0x78>
    87c8:	1025883a 	mov	r18,r2
    87cc:	003fd506 	br	8724 <__call_exitprocs+0x44>
    87d0:	90806317 	ldw	r2,396(r18)
    87d4:	81002017 	ldw	r4,128(r16)
    87d8:	1886703a 	and	r3,r3,r2
    87dc:	1800061e 	bne	r3,zero,87f8 <__call_exitprocs+0x118>
    87e0:	200b883a 	mov	r5,r4
    87e4:	a809883a 	mov	r4,r21
    87e8:	303ee83a 	callr	r6
    87ec:	003ff106 	br	87b4 <__call_exitprocs+0xd4>
    87f0:	94400115 	stw	r17,4(r18)
    87f4:	003fe806 	br	8798 <__call_exitprocs+0xb8>
    87f8:	303ee83a 	callr	r6
    87fc:	003fed06 	br	87b4 <__call_exitprocs+0xd4>

00008800 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    8800:	defffd04 	addi	sp,sp,-12
    8804:	df000215 	stw	fp,8(sp)
    8808:	df000204 	addi	fp,sp,8
    880c:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    8810:	0001883a 	nop
    8814:	e0bffe17 	ldw	r2,-8(fp)
    8818:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    881c:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    8820:	10000226 	beq	r2,zero,882c <_exit+0x2c>
    ALT_SIM_FAIL();
    8824:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
    8828:	00000106 	br	8830 <_exit+0x30>
    ALT_SIM_PASS();
    882c:	002af0b0 	cmpltui	zero,zero,43970
}
    8830:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    8834:	003fff06 	br	8834 <_exit+0x34>
